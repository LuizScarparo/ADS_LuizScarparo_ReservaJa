openapi: 3.1.0
info:
  title: RU PLATFORM API
  version: 0.0.1
  description: Ru Platform API Documentation
servers:
  - url: http://localhost:4000
tags:
  - name: Users
    description: Endpoints relacionados à usuários
  - name: Reservations
    description: Endpoints relacionados à reservas
  - name: Auth
    description: Endpoints relacionados à autenticação
  - name: Menus
    description: Endpoints relacionados à cardápios
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Registra um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                mail:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "yourPassword123"
                role:
                  type: string
                  example: "student"
                phone:
                  type: string
                  example: "54 99999-9999"
                student:
                  type: object
                  properties:
                    enrollmentNumber:
                      type: string
                      example: "123456"
      responses:
        "201":
          description: Usuário criado com sucesso

  /auth/login:
    post:
      tags:
        - Auth
      summary: Faz login do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mail:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "yourPassword123"
      responses:
        "200":
          description: Login realizado com sucesso

  /auth/request-reset-password:
    post:
      tags:
        - Auth
      summary: Solicita redefinição de senha
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mail:
                  type: string
                  example: "user@example.com"
      responses:
        "200":
          description: Solicitação de redefinição enviada

  /auth/reset-password/{id}/{token}:
    post:
      tags:
        - Auth
      summary: Redefine a senha do usuário
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: "newPassword123"
      responses:
        "200":
          description: Senha redefinida com sucesso

  /users:
    get:
      tags:
        - Users
      summary: Lista todos os usuários
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de usuários

  /reservations:
    post:
      tags:
        - Reservations
      summary: Cria uma nova reserva para o usuário autenticado
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reservedDates:
                  type: object
                  description: Datas e refeições a serem reservadas
                  additionalProperties:
                    type: object
                    properties:
                      lunch:
                        type: object
                        properties:
                          isReserved:
                            type: boolean
                          status:
                            type: string
                            example: "pendente"
                      dinner:
                        type: object
                        properties:
                          isReserved:
                            type: boolean
                          status:
                            type: string
                            example: "confirmada"
            example:
              reservedDates:
                "2025-04-11":
                  lunch:
                    isReserved: true
                    status: "pendente"
                  dinner:
                    isReserved: false
                "2025-04-12":
                  lunch:
                    isReserved: false
                  dinner:
                    isReserved: true
                    status: "confirmada"
      responses:
        "201":
          description: Reserva criada com sucesso
        "400":
          description: Erro de validação ou conflito de refeições
        "500":
          description: Erro interno no servidor

    get:
      tags:
        - Reservations
      summary: Lista todas as reservas, para que admins possam visualizar
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de reservas
        "401":
          description: Não autorizado
        "500":
          description: Erro interno no servidor

  /reservations/{id}:
    patch:
      tags:
        - Reservations
      summary: Atualiza as refeições de uma data específica de uma reserva existente
      description: Atualiza as informações de almoço e/ou jantar em uma data específica da reserva de um usuário autenticado.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Um único dia com suas respectivas refeições atualizadas
              example:
                "2025-04-20":
                  lunch:
                    isReserved: true
                    status: "confirmada"
                  dinner:
                    isReserved: false
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Reserva atualizada com sucesso
        "400":
          description: Erro de validação ou tentativa de atualizar fora do horário permitido
        "401":
          description: Não autorizado
        "404":
          description: Reserva ou data não encontrada
        "500":
          description: Erro interno no servidor

    delete:
      tags:
        - Reservations
      summary: Cancela refeições específicas de uma data em uma reserva existente
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                day:
                  type: string
                  example: "2025-04-23"
                meals:
                  type: array
                  items:
                    type: string
                    enum: [lunch, dinner]
                  example: ["lunch"]
            example:
              day: "2025-04-23"
              meals:
                - lunch
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Refeições canceladas com sucesso. Nenhum conteúdo é retornado.
        "400":
          description: Erro de validação ou permissão negada
        "401":
          description: Não autorizado
        "404":
          description: Reserva ou data não encontrada
        "500":
          description: Erro interno no servidor

  /reservations/status/{id}:
    patch:
      tags:
        - Reservations
      summary: Atualiza o status de uma reserva existente
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                day:
                  type: string
                  example: "2025-04-23"
                meal:
                  type: string
                  enum: [lunch, dinner]
                  example: "lunch"
                status:
                  type: string
                  enum: [consumed, no_show]
                  example: "consumed"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Status atualizado com sucesso
        "400":
          description: Erro de validação ou permissão negada
        "401":
          description: Não autorizado
        "404":
          description: Reserva não encontrada
        "500":
          description: Erro interno no servidor

  /reservations/day:
    get:
      tags:
        - Reservations
      summary: Lista as reservas do dia atual
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de reservas do dia atual
        "401":
          description: Não autorizado
        "500":
          description: Erro interno no servidor
  
  /reservations/week:
    get:
      tags:
        - Reservations
      summary: Lista as reservas da semana atual
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de reservas da semana atual
        "401":
          description: Não autorizado
        "500":
          description: Erro interno no servidor

  /reservations/me:
    get:
      tags:
        - Reservations
      summary: Lista as reservas do usuário autenticado
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de reservas do usuário autenticado
        "401":
          description: Não autorizado
        "500":
          description: Erro interno no servidor

  /users/{id}:
    delete:
      tags:
        - Users
      summary: Exclui a conta do usuário autenticado
      description: >
        Permite que um usuário logado exclua somente sua própria conta.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: ID do usuário a ser excluído (deve coincidir com o usuário autenticado)
          schema:
            type: string
      responses:
        "204":
          description: Conta excluída com sucesso. Sem conteúdo de retorno.
        "401":
          description: Não autenticado (token ausente ou inválido).
        "403":
          description: Permissão negada (tentou excluir outra conta).
        "404":
          description: Usuário não encontrado.
        "500":
          description: Erro interno no servidor.
    get:
      tags:
        - Users
      summary: Retorna um usuário por ID
      description: Retorna os dados completos de um único usuário (Visitor, Student, Teacher, Employee ou Admin).
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: ID do usuário a ser obtido (deve coincidir com o usuário autenticado ou, se admin, pode ser qualquer)
          schema:
            type: string
      responses:
        "200":
          description: Usuário encontrado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Não autenticado (token ausente ou inválido)
        "403":
          description: Acesso negado (usuário tentando acessar dados de outro usuário)
        "404":
          description: Usuário não encontrado
        "500":
          description: Erro interno no servidor
    patch:
      tags:
        - Users
      summary: Atualiza nome e e-mail do usuário
      description: Permite que o usuário autenticado altere apenas seu `name` e `mail`.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: ID do usuário (deve coincidir com o usuário autenticado)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "João Silva"
                mail:
                  type: string
                  format: email
                  example: "joao.silva@example.com"
              required:
                - name
                - mail
            example:
              name: "João Silva"
              mail: "joao.silva@example.com"
      responses:
        "200":
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Requisição inválida (campos faltando ou formato incorreto)
        "401":
          description: Não autenticado (token ausente ou inválido)
        "403":
          description: Acesso negado (tentativa de alterar outro usuário)
        "404":
          description: Usuário não encontrado
        "500":
          description: Erro interno no servidor
  
  /menu/menus:
    get:
      tags:
        - Menus
      summary: Retorna a url dos cardápios da semana
      description: Retorna a URL dos cardápios da semana atual.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: URL dos cardápios encontrados com sucesso
        "500":
          description: Erro interno no servidor"

  /menu/upload:
    post:
      tags:
        - Menus
      summary: Insere um novo cardápio para o dia solicitado
      description: Permite que admins insiram um cardápio para um dia específico.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                day:
                  type: string
                  example: Monday
                file:
                  type: string
                  format: binary
              required:
                - day
                - file
      responses:
        "200":
          description: Cardápio criado com sucesso
        "400":
          description: Requisição inválida (campos faltando ou formato incorreto)
        "401":
          description: Não autenticado (token ausente ou inválido)
        "403":
          description: Acesso negado (usuário não autorizado a criar cardápios)
        "500":
          description: Erro interno no servidor
        

